<?xml version="1.0" encoding="UTF-8"?>
<project name="tawd-package" default="release">

	<property file="build.properties" />
	<property name="tawd.home" value="../tawd" />
	<property name="tawd.asset" value="${tawd.home}/../sparkplayer-eartheternal/bin/assets" />
	<property name="tawd.data" value="${tawd.home}/../iceee-data" />
	<property name="tawd.edition" value="the-anubian-war" />

	<property name="nsis.make" value="makensis" />

	<property name="build.systemd" value="true" />
	<property name="build.version" value="0.0.1" />
	<property name="build.dir" value="${basedir}/target" />
	<property name="build.staging" value="${build.dir}/staging" />
	<property name="build.asset" value="${build.dir}/asset" />
	<property name="build.release" value="${build.dir}/release" />
	<property name="build.rebuild.server" value="true" />

	<!-- Task definitions for tasks not part of core Ant -->
	<taskdef name="deb" classname="org.vafer.jdeb.ant.DebAntTask" classpath="tools/jdeb-1.5.jar" />
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${basedir}/tools/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<target name="get-cores">
		<property environment="env" />
		<!-- support for Windows -->
		<condition property="cores.count" value="${env.NUMBER_OF_PROCESSORS}">
			<os family="windows" />
		</condition>
		<!-- support for Linux and Solaris (package SUNWgnu-coreutils is required) -->
		<exec executable="nproc" outputproperty="cores.count" os="Linux,SunOS,Solaris">
			<arg value="--all" />
		</exec>
		<!-- support for Mac OS X -->
		<exec executable="sysctl" outputproperty="cores.count" os="Mac OS X">
			<arg value="-n" />
			<arg value="hw.ncpu" />
		</exec>
		<echo message="Number of cores: ${cores.count}" />
	</target>

	<!-- Supporting targets (not usually called directly) -->
	<target name="prepare-assets">
		<!-- Assets -->
		<mkdir dir="${build.asset}" />
		<copy todir="${build.asset}" failonerror="true">
			<fileset dir="${tawd.asset}">
				<include name="Release/**/*.car" />
				<include name="Release/Current/*.txt" />
			</fileset>
		</copy>
	</target>

	<target name="release-windows-files">
		<mkdir dir="${build.staging}" />
		<copy todir="${build.staging}">
			<fileset dir="${tawd.home}">
				<include name="AIScript/**/*" />
				<include name="Data/**/*" />
				<include name="Instance/**/*" />
				<include name="ItemMod/**/*" />
				<include name="Loot/**/*" />
				<include name="Packages/**/*" />
				<include name="QuestScripts/**/*" />
				<include name="Scenery/**/*" />
				<include name="SpawnPackages/**/*" />
				<exclude name="**/*.cnut" />
			</fileset>
		</copy>

		<!-- Initial empty data dirs -->

		<mkdir dir="${build.staging}/Accounts" />
		<mkdir dir="${build.staging}/Dynamic" />
		<mkdir dir="${build.staging}/Characters" />
		<mkdir dir="${build.staging}/Grove" />
		<mkdir dir="${build.staging}/CreditShop" />
		<mkdir dir="${build.staging}/IGForum" />
		<mkdir dir="${build.staging}/Petitions" />
		<mkdir dir="${build.staging}/ZoneDef" />
		<mkdir dir="${build.staging}/VirtualItems" />


		<!-- Executables -->
		<copy file="${tawd.home}/SOURCE/Daemon/tawd.exe" todir="${build.staging}" />
		<copy file="${tawd.home}/SOURCE/Daemon/tawdsvc.exe" todir="${build.staging}" />
	</target>

	<target name="clean-staging">
		<delete dir="${build.staging}" />
	</target>

	<target name="init">
		<antcall target="get-cores"/>
		<tstamp>
			<format property="build.date" pattern="yyyyMMDDHHmm" />
		</tstamp>
		<property name="build.fullversion">${build.version}${build.date}</property>
	</target>

	<!-- Primary targets -->

	<target name="release" depends="release-windows,release-linux">
	</target>

	<target name="release-linux" depends="release-linux-assets,release-linux-data,release-linux-deb">
	</target>

	<target name="release-linux-assets" depends="init,clean-staging,prepare-assets">

		<copy todir="${build.staging}/asset-control">
			<fileset dir="${basedir}/packaging/asset-deb/control" />
			<filterset begintoken="[[" endtoken="]]">
				<filter token="version" value="${build.fullversion}" />
				<filter token="edition" value="${tawd.edition}" />
				<filter token="editionFullName" value="${tawd.edition.fullname}" />
			</filterset>
		</copy>

		<deb destfile="${build.dir}/release/${tawd.edition}-asset-${build.fullversion}.deb" control="${build.staging}/asset-control">
			<tarfileset dir="${build.asset}" prefix="/usr/share/tawd/Asset" filemode="555" username="root" group="root">
				<include name="**/*" />
			</tarfileset>

		</deb>
	</target>

	<target name="release-linux-data" depends="init,clean-staging">

		<copy todir="${build.staging}/data-control">
			<fileset dir="${basedir}/packaging/data-deb/control" />
			<filterset begintoken="[[" endtoken="]]">
				<filter token="version" value="${build.fullversion}" />
				<filter token="edition" value="${tawd.edition}" />
				<filter token="editionFullName" value="${tawd.edition.fullname}" />
			</filterset>
		</copy>

		<deb destfile="${build.dir}/release/${tawd.edition}-data-${build.fullversion}.deb" control="${build.staging}/data-control">
			<tarfileset dir="${tawd.data}" prefix="/usr/share/tawd" filemode="555" username="root" group="root">
				<include name="Static/**/*" />
			</tarfileset>
			<tarfileset dir="${tawd.data}" prefix="/var/lib/tawd" filemode="555" username="root" group="root">
				<include name="Variable/**/*" />
			</tarfileset>

		</deb>
	</target>

	<target name="prepare-linux">
		<if>
			<equals arg1="${build.rebuild.server}" arg2="true" />
			<then>
				<exec dir="${tawd.home}" executable="./configure">
					<arg value="--bindir=/usr/bin" />
					<arg value="--sbindir=/sbin" />
					<arg value="--libexecdir=/usr/libexec" />
					<arg value="--sysconfdir=/etc" />
					<arg value="--libdir=/usr/lib" />
					<arg value="--datarootdir=/usr/share" />
					<arg value="--localstatedir=/var" />
					<arg value="--with-localconfigdir=/etc/tawd" />
					<arg value="--enable-debug" />
				</exec>
				<echo>Removing all files for clean build</echo>
				<exec dir="${tawd.home}" executable="make">
					<arg value="clean" />
				</exec>
				<echo>Building server from scratch</echo>
				<exec failonerror="true" dir="${tawd.home}" executable="make">
					<arg value="-j" />
					<arg value="4" />
				</exec>
			</then>
		</if>

		<!-- Configuration files -->
		<copy file="${tawd.home}/Local/LogConfig.txt.sample" tofile="${build.staging}/LogConfig.txt" />
		<copy file="${tawd.home}/Local/Cluster.txt.sample" tofile="${build.staging}/Cluster.txt" />
		<copy file="${tawd.home}/Local/ServerConfig.txt.sample" tofile="${build.staging}/ServerConfig.txt" />
		<replace dir="${build.staging}">
			<include name="ServerConfig.txt" />
			<replacetoken><![CDATA[ShutdownHandlerScript=]]></replacetoken>
			<replacevalue><![CDATA[ShutdownHandlerScript=/etc/tawd/crash-handler.sh]]></replacevalue>
		</replace>
		<replace dir="${build.staging}">
			<include name="ServerConfig.txt" />
			<replacetoken><![CDATA[StaticDataPath=../iceee-data/Static]]></replacetoken>
			<replacevalue><![CDATA[StaticDataPath=/usr/share/tawd/Static]]></replacevalue>
		</replace>
		<replace dir="${build.staging}">
			<include name="ServerConfig.txt" />
			<replacetoken><![CDATA[VariableDataPath=../iceee-data/Variable]]></replacetoken>
			<replacevalue><![CDATA[VariableDataPath=/var/lib/tawd/Variable]]></replacevalue>
		</replace>
		<replace dir="${build.staging}">
			<include name="ServerConfig.txt" />
			<replacetoken><![CDATA[HTTPBaseFolder=asset]]></replacetoken>
			<replacevalue><![CDATA[HTTPBaseFolder=/var/lib/tawd/asset]]></replacevalue>
		</replace>
		<replace dir="${build.staging}">
			<include name="ServerConfig.txt" />
			<replacetoken><![CDATA[HTTPCARFolder=../sparkplayer-eartheternal/bin/assets]]></replacetoken>
			<replacevalue><![CDATA[HTTPCARFolder=/usr/share/tawd/Asset]]></replacevalue>
		</replace>
		<replace dir="${build.staging}">
			<include name="ServerConfig.txt" />
			<replacetoken><![CDATA[LogPath=Logs]]></replacetoken>
			<replacevalue><![CDATA[LogPath=/var/log/tawd]]></replacevalue>
		</replace>
		<copy file="${tawd.home}/Local/LogConfig.txt.sample" tofile="${build.staging}/LogConfig.txt" />
		<replace dir="${build.staging}">
			<include name="LogConfig.txt" />
			<replacetoken><![CDATA[FILENAME             =  "Logs/]]></replacetoken>
			<replacevalue><![CDATA[FILENAME             =  "/var/log/tawd/]]></replacevalue>
		</replace>
		<replace dir="${build.staging}">
			<include name="LogConfig.txt" />
			<replacetoken><![CDATA[TO_STANDARD_OUTPUT   =  true]]></replacetoken>
			<replacevalue><![CDATA[TO_STANDARD_OUTPUT   =  false]]></replacevalue>
		</replace>

		<echo file="${build.staging}/crash-handler.sh">
		</echo>

		<mkdir dir="${build.staging}/init" />
		<if>
			<equals arg1="${build.systemd}" arg2="true" />
			<then>
				<mkdir dir="${build.staging}/init/lib/systemd/system" />
				<copy file="${tawd.home}/Etc/Linux/tawd.service" todir="${build.staging}/init/lib/systemd/system" />
			</then>
			<else>
				<mkdir dir="${build.staging}/init/etc/init.d" />
				<copy file="${tawd.home}/Etc/Linux/tawd" todir="${build.staging}/init/etc/init.d" />
			</else>
		</if>
	</target>


	<target name="release-linux-deb" depends="init,clean-staging,prepare-linux">

		<!-- Process control directory -->
		<mkdir dir="${build.staging}" />
		<copy todir="${build.staging}/control">
			<fileset dir="${basedir}/packaging/deb/control" />
			<filterset begintoken="[[" endtoken="]]">
				<filter token="edition" value="${tawd.edition}" />
				<filter token="editionFullName" value="${tawd.edition.fullname}" />
				<filter token="version" value="${build.fullversion}" />
				<filter token="arch" value="${os.arch}" />
			</filterset>
		</copy>

		<mkdir dir="${build.dir}/release" />
		<deb destfile="${build.dir}/release/tawd-${build.fullversion}-${os.arch}.deb" control="${build.staging}/control">

			<!-- Service script -->

			<tarfileset dir="${build.staging}/init" filemode="755" username="root" group="root">
				<include name="**/*" />
			</tarfileset>

			<!-- Binaries -->
			<tarfileset dir="${tawd.home}/SOURCE/Daemon" prefix="/usr/bin" filemode="555" username="root" group="root">
				<include name="tawd" />
			</tarfileset>
			<tarfileset dir="${tawd.home}/SOURCE/Tools" prefix="/usr/bin" filemode="555" username="root" group="root">
				<include name="text2redis" />
				<include name="eeaccount" />
			</tarfileset>

			<tarfileset dir="${build.staging}" filemode="600" username="root" group="root" prefix="/etc/tawd">
				<include name="ServerConfig.txt" />
				<include name="LogConfig.txt" />
				<include name="Cluster.txt" />
				<include name="crash-handler.sh" />
			</tarfileset>

			<!-- Static assets -->
			<tarfileset dir="${tawd.home}/asset" prefix="/var/lib/tawd/asset" username="root" group="root">
				<include name="*.html" />
				<include name="*.js" />
				<include name="*.txt" />
				<include name="*.css" />
			</tarfileset>

			<!-- Links (some targets are created in the post inst script
			<link target="/etc/tawd/ServerConfig.txt" name="/var/lib/tawd/Local/ServerConfig.txt" />
			<link target="/etc/tawd/Cluster.txt" name="/var/lib/tawd/Local/Cluster.txt" />
			<link target="/var/log/tawd/crash_dump.txt" name="/var/lib/tawd/crash_dump.txt" />
			<link target="/etc/tawd/LogConfig.txt" name="/var/lib/tawd/Local/LogConfig.txt" /> -->
		</deb>
	</target>

	<target name="release-windows" depends="init,clean-staging,release-windows-files">
		<mkdir dir="${build.dir}/release" />
		<exec executable="${nsis.make}" dir="${basedir}/packaging/windows">
			<arg value="tawd.nsis" />
		</exec>
	</target>

	<!-- Clean -->

	<target name="clean" depends="init,clean-staging">
		<delete dir="${build.release}" />
		<delete dir="${build.asset}" />
	</target>
</project>
